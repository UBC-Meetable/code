type UserProfile {
  email: String!
  firstName: String
  lastName: String
  profilePicture: String
  bio: String
  userState: UserState
  university: String
  major: String
  courses: [Course!]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

enum UserState {
  SIGNED_UP
  UNI_SELECTED
  PROFILE_CREATED
  DONE
}

type Course {
  code: String!
  section: String!
}

input CourseInput {
  code: String!
  section: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserProfileConnection {
  items: [UserProfile]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserStateInput {
  eq: UserState
  ne: UserState
}

input ModelUserProfileFilterInput {
  email: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  profilePicture: ModelStringInput
  bio: ModelStringInput
  userState: ModelUserStateInput
  university: ModelStringInput
  major: ModelStringInput
  and: [ModelUserProfileFilterInput]
  or: [ModelUserProfileFilterInput]
  not: ModelUserProfileFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUserProfile(email: String!): UserProfile
  listUserProfiles(email: String, filter: ModelUserProfileFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserProfileConnection
}

input CreateUserProfileInput {
  email: String!
  firstName: String
  lastName: String
  profilePicture: String
  bio: String
  userState: UserState
  university: String
  major: String
  courses: [CourseInput!]
}

input UpdateUserProfileInput {
  email: String!
  firstName: String
  lastName: String
  profilePicture: String
  bio: String
  userState: UserState
  university: String
  major: String
  courses: [CourseInput!]
}

input DeleteUserProfileInput {
  email: String!
}

type Mutation {
  createUserProfile(input: CreateUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile
  updateUserProfile(input: UpdateUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile
  deleteUserProfile(input: DeleteUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile
}

input ModelUserProfileConditionInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  profilePicture: ModelStringInput
  bio: ModelStringInput
  userState: ModelUserStateInput
  university: ModelStringInput
  major: ModelStringInput
  and: [ModelUserProfileConditionInput]
  or: [ModelUserProfileConditionInput]
  not: ModelUserProfileConditionInput
}

type Subscription {
  onCreateUserProfile(owner: String!): UserProfile @aws_subscribe(mutations: ["createUserProfile"])
  onUpdateUserProfile(owner: String!): UserProfile @aws_subscribe(mutations: ["updateUserProfile"])
  onDeleteUserProfile(owner: String!): UserProfile @aws_subscribe(mutations: ["deleteUserProfile"])
}
