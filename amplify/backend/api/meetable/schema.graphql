type User
  @model
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }]) {
  id: String! @primaryKey
  email: String!
  firstName: String
  lastName: String
  profilePicture: String
  bio: String
  userState: UserState
  university: String!
    @index(
      name: "byUniYear"
      queryField: "UserByUniYear"
      sortKeyFields: ["year"]
    )
  year: Int!
  major: String
  interests: [String]
  courseGroups: [CourseGroup!]! @manyToMany(relationName: "CourseGroupUsers")
  friendGroups: [FriendGroup!]! @manyToMany(relationName: "FriendGroupUsers")
  events: [Event!]! @manyToMany(relationName: "EventAttendees")
  expoPushToken: String
  multipleGroupsOptIn: Boolean
}

type CourseGroup
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read, update, delete] }
    ]
  ) {
  users: [User!]! @manyToMany(relationName: "CourseGroupUsers")
  title: String!
  groupID: String! @primaryKey
  code: String!
  section: String!
  events: [Event!]! @hasMany
  messages: [ChatMessage!] @hasMany
}

type Event
  @model
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }]) {
  id: String! @primaryKey
  title: String!
  description: String
  startTime: AWSDateTime!
  endTime: AWSDateTime!
  location: String
  courseGroupEventsId: String!
    @index(
      name: "byCourseGroupId"
      queryField: "EventByCourseGroupId"
      sortKeyFields: ["startTime"]
    )
  courseGroup: CourseGroup! @belongsTo(fields: ["courseGroupEventsId"])
  attendees: [User!]! @manyToMany(relationName: "EventAttendees")
  messages: [ChatMessage!] @hasMany
}

type FriendGroup
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read, update, delete] }
    ]
  ) {
  users: [User!] @manyToMany(relationName: "FriendGroupUsers")
  groupID: String! @primaryKey
  title: String
  messages: [ChatMessage!] @hasMany
  owner: String
}

type DirectChat @model @auth(rules: [{ allow: owner }]) {
  id: String! @primaryKey
  userID1: String!
  userID2: String!
  user1: User @hasOne(fields: ["userID1"])
  user2: User @hasOne(fields: ["userID2"])
  messages: [ChatMessage!]! @hasMany
}

type ChatMessage
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create] }
      { allow: private, operations: [read, update, delete] }
    ]
  ) {
  id: String! @primaryKey
  parentId: String!
    @index(
      name: "byParentId"
      queryField: "ChatMessageByParentId"
      sortKeyFields: ["createdAt"]
    )
  event: Event @belongsTo(fields: ["parentId"])
  groupChat: CourseGroup @belongsTo(fields: ["parentId"])
  directChat: DirectChat @belongsTo(fields: ["parentId"])
  author: User! @hasOne
  body: String!
  files: [FileAttachment!]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Subscription {
  subscribeToEventsFromCourseGroup(courseGroupEventsId: String!): Event
    @aws_subscribe(mutations: ["createEvent"])
  subscribeToMessagesFromParent(parentId: String!): ChatMessage
    @aws_subscribe(mutations: ["createChatMessage"])
}

type FileAttachment {
  fileURI: String!
  width: Int!
  height: Int!
  type: FileType
}

enum FileType {
  image
  video
}

enum GroupType {
  COURSE
  FRIEND
}
enum UserState {
  SIGNED_UP
  UNI_SELECTED
  PROFILE_CREATED
  INTERESTS_SELECTED
  DONE
}

type QAPair {
  q: String!
  a: String!
}

type Query {
  joinFriendGroup(user: joinFriendGroupInput): joinFriendGroupOutput
    @function(name: "joinFriendGroup-${env}")
  getFriendSuggestion(id: String): getFriendSuggestionOutput
    @function(name: "getSuggestedFriends-${env}")
}

input joinFriendGroupInput {
  id: String!
  university: String!
  year: Int!
}

type joinFriendGroupOutput {
  statusCode: Int!
  groupID: String
  relevantUsers: [String!]!
}

type getFriendSuggestionOutput {
  user: [User]
}

type Mutation {
  pushNotification(input: pushNotificationInput): pushNotificationOutput
    @function(name: "pushNotification-${env}")
}

input pushNotificationInput {
  groupID: String
  userID2: String
  userID: String!
  userName: String!
  hasFile: Boolean!
  text: String
  groupType: GroupType
}

type pushNotificationOutput {
  statusCode: Int!
  body: String
}
