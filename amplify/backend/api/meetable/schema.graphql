type UserProfile @model @auth(rules: [{ allow: owner, operations: [create, delete, update]}]) @key(fields: ["email"]) {
  email: String!
  firstName: String
  lastName: String
  profilePicture: String
  bio: String
  userState: UserState
  university: String
  major: String
  courses: [Course!]
  courseGroups: [CourseGroupMember] @connection(keyName: "byUser", fields: ["email"])
}

type CourseGroup @model @key(fields: ["courseID"]) @auth(rules: [{allow: owner, operations: [create]}]){
  users: [CourseGroupMember!] @connection(keyName: "byCourseGroup", fields: ["courseID"])
  title: String
  course: Course!
  courseID: String!
}

type CourseGroupMember
  @model(queries: null)
  @key(name: "byCourseGroup", fields: ["groupID", "email"])
  @key(name: "byUser", fields: ["email", "groupID"]) {
  id: ID!
  groupID: String!
  email: String!
  courseGroup: CourseGroup! @connection(fields: ["groupID"])
  user: UserProfile! @connection(fields: ["email"])
}


enum UserState {
  SIGNED_UP
  UNI_SELECTED
  PROFILE_CREATED
  DONE
}

type Course {
  code: String!
  section: String!
}

