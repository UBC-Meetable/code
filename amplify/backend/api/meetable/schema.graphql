
# [MODELS]
type User
  @model 
  @auth(rules: [{ allow: owner, operations: [create, delete, update]}]) 
  @key(fields: ["id"]) {
  id: String!
  email: String!
  firstName: String
  lastName: String
  profilePicture: String
  bio: String
  userState: UserState
  university: String
  major: String
  courseGroups: [CourseGroupConnectionModel] @connection(keyName: "byUser", fields: ["id"])
  friendGroups: [FriendGroupConnectionModel] @connection(keyName: "byUser", fields: ["id"])
}

type CourseGroup
    @model 
    @key(fields: ["groupID"])
    @auth(rules: [{allow: owner, operations: [create]}]){
  users: [CourseGroupConnectionModel!] @connection(keyName: "byCourseGroup", fields: ["groupID"])
  title: String!
  groupID: String!
  code: String!
  section: String!
  messages: [ChatMessage!] @connection(keyName: "byCourseGroupChatID", fields: ["groupID"])
}

type FriendGroup
  @model
  @key(fields: ["groupID"])
  @auth(rules: [{allow: owner, operations:[create]}])
  {
  users: [FriendGroupConnectionModel!] @connection(keyName: "byFriendGroup", fields: ["groupID"])
  groupID: String!
  title: String!
  messages: [ChatMessage!] @connection(keyName: "byCourseGroupChatID", fields: ["groupID"])
  owner: String
}
 
# [CONNECTIONS]

#[Many ChatMessages: Many Users]
type ChatMessage
  @model
  @key(name: "byCourseGroupChatID", fields: ["groupChatID", "createdAt"], queryField: "messagesByCourseGroupChatID")
  @auth(rules: [{allow: owner, operations: [create]}]) {
    groupChatID: String!
    userID: String!
    author: User! @connection(fields: ["userID"])
    body: String!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    groupType: GroupType!
  }

enum GroupType {
  COURSE
  FRIEND
}
# [Many UserProfiles: Many CourseGroups]
# Represents a connection between a User and a CourseGroup
type CourseGroupConnectionModel
  @model(queries: null)
  @key(name: "byCourseGroup", fields: ["groupID", "userID"])
  @key(name: "byUser", fields: ["userID", "groupID"]) {
  id: ID!
  groupID: String!
  userID: String!
  courseGroup: CourseGroup! @connection(fields: ["groupID"])
  user: User! @connection(fields: ["userID"])
}

type FriendGroupConnectionModel
  @model(queries: null)
  @key(name: "byFriendGroup", fields: ["groupID", "userID"])
  @key(name: "byUser", fields: ["userID", "groupID"]) {
  id: ID!
  groupID: String!
  userID: String!
  friendGroup: FriendGroup! @connection(fields: ["groupID"])
  user: User! @connection(fields: ["userID"])
}


# [PRIVATE HELPER TYPES]
enum UserState {
  SIGNED_UP
  UNI_SELECTED
  PROFILE_CREATED
  DONE
}

