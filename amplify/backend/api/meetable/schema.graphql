
# [MODELS]
type User
  @model 
  @auth(rules: [{ allow: owner, operations: [create, delete, update]}]) 
  @key(fields: ["id"]) 
  @key(name: "byUniYear", fields: ["university", "year"], queryField: "UserByUniYear") {
  id: String!
  email: String!
  firstName: String
  lastName: String
  profilePicture: String
  bio: String
  userState: UserState
  university: String!
  year: Int!
  major: String
  interests: [Interest]
  courseGroups: [CourseGroupConnection!]! @connection(keyName: "byUser", fields: ["id"])
  friendGroups: [FriendGroupConnection!]! @connection(keyName: "byUser", fields: ["id"])
  quizzes: [Quiz!]! @connection(keyName: "byUser", fields: ["id"])
  expoPushToken: String
  multipleGroupsOptIn: Boolean # undefined interpreted same as false
}

# Course Groups
type CourseGroup
    @model 
    @key(fields: ["groupID"])
    @auth(rules: [{allow: owner, operations: [create]}]){
  users: [CourseGroupConnection!] @connection(keyName: "byCourseGroup", fields: ["groupID"])
  title: String!
  groupID: String!
  code: String!
  section: String!
  messages: [ChatMessage!] @connection(keyName: "byCourseGroupChatID", fields: ["groupID"])
}

# Friend Groups 
type FriendGroup
  @model
  @key(fields: ["groupID"])
  @auth(rules: [{allow: owner, operations:[create]}])
  {
  users: [FriendGroupConnection!] @connection(keyName: "byFriendGroup", fields: ["groupID"])
  groupID: String!
  title: String
  messages: [ChatMessage!] @connection(keyName: "byCourseGroupChatID", fields: ["groupID"])
  owner: String
} 

type Report
  @model
  @key(name: "byReporter", fields: ["reportingUserID"])
  @key(name: "byReported", fields: ["reportedUserID"])
  @auth(rules: [{ allow: owner, operations: [create]}])
  {
    id: ID!
    message: ChatMessage
    title: String!
    body: String!
    reportingUserID: String!
    reportedUserID: String!
    reportingUser: User @connection(fields: ["reportingUserID"])
    reportedUser: User @connection(fields: ["reportedUserID"])
  } 

type DirectChat
  @model
  @key(name: "byUsers", fields: ["userID1", "userID2"], queryField: "chatByUsers")
  @auth(rules: [{ allow: owner, operations: [create, update, delete, read]}])
  {
    id: String!
    userID1: String!
    userID2: String!
    user1: User @connection(fields: ["userID1"])
    user2: User @connection(fields: ["userID2"])
    messages: [ChatMessage!]! @connection(keyName: "byDirectChatID", fields: ["id"])
  }
 
# [CONNECTIONS]

#[Many ChatMessages: Many Users]
type ChatMessage
  @model
  @key(name: "byCourseGroupChatID", fields: ["groupChatID", "createdAt"], queryField: "messagesByCourseGroupChatID")
  @key(name: "byDirectChatID", fields: ["directChatID", "createdAt"], queryField: "messagesByDirectChatID")
  @auth(rules: [{allow: owner, operations: [create]}]) {
    groupChatID: String # removing ! to allow ChatMessages in DMs
    directChatID: String
    userID: String!
    author: User! @connection(fields: ["userID"])
    body: String!
    files: [FileAttachment!]
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    groupType: GroupType # removing ! to allow ChatMessages in DMs, could be a bad soln though
  }

type FileAttachment {
  fileURI: String!
  width: Int!
  height: Int!
  type: FileType
}

type Interest {
  name: string;
  category: string;
  isInterest: boolean;
}

enum FileType {
  image
  video
}

enum GroupType {
  COURSE
  FRIEND
}
# [Many UserProfiles: Many CourseGroups]
# Represents a connection between a User and a CourseGroup
type CourseGroupConnection
  @auth(rules: [{allow: owner, operations: [create, update, delete]}])
  @model
  @key(name: "byCourseGroup", fields: ["groupID", "userID"])
  @key(name: "byUser", fields: ["userID", "groupID"], queryField: "CourseGroupByUser") {
  id: ID!
  groupID: String!
  userID: String!
  courseGroup: CourseGroup! @connection(fields: ["groupID"])
  user: User! @connection(fields: ["userID"])
}

type FriendGroupConnection
  @auth(rules: [{allow: owner, operations: [create, update, delete]}])
  @model
  @key(name: "byFriendGroup", fields: ["groupID", "userID"])
  @key(name: "byUser", fields: ["userID", "groupID"], queryField: "FriendGroupByUser") {
  id: ID!
  groupID: String!
  userID: String!
  friendGroup: FriendGroup! @connection(fields: ["groupID"])
  user: User! @connection(fields: ["userID"])
}

type Quiz
  @model
  @key(name: "byUser", fields: ["userID"])
  @auth(rules: [{allow: owner, operations:[create]}])
  {
    userID: String!
    user: User! @connection(fields: ["userID"])
    responses: [QAPair!]! # always has an array with 0 or more QAPair only
    createdAt: AWSDateTime! # quiz won't be modified after
  }

# [PRIVATE HELPER TYPES]
enum UserState {
  SIGNED_UP
  UNI_SELECTED
  PROFILE_CREATED
  DONE
}

type QAPair {
  q: String!
  a: String!
}

# [LAMBDA FUNCTIONS]

# joinFriendGroupInput -> GroupID
type Query {
  joinFriendGroup(user: joinFriendGroupInput): joinFriendGroupOutput @function(name: "joinFriendGroup-${env}")
}

input joinFriendGroupInput {
  id: String!
  university: String!
  year: Int!
}

type joinFriendGroupOutput {
  statusCode: Int!
  groupID: String
  relevantUsers: [String!]!
}

type Mutation {
  pushNotification(input: pushNotificationInput): pushNotificationOutput @function(name: "pushNotification-${env}")
}

input pushNotificationInput {
  groupID: String # either groupID or userID2 is included, but not both (indicating DM or group)
  userID2: String
  userID: String!
  userName: String!
  hasFile: Boolean!
  text: String
  groupType: GroupType
}

type pushNotificationOutput {
  statusCode: Int!
  body: String
}


# this fn may not need to exist in the schema if it's not called by the frontend directly (?)
# also I think the fn having no input causes a syntax error
# type Mutation {
#   periodicGrouping(): periodicGroupingOutput @function(name: "periodicGrouping-${env}")
# }

# type periodicGroupingOutput {
#   statusCode: Int!
#   body: String
# }
