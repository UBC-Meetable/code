/*!
 * Bootstrap v3.4.1 (https://getbootstrap.com/)
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under the MIT license
 */
if (typeof jQuery === "undefined") throw new Error("Bootstrap's JavaScript requires jQuery"); !(function (t) {
  const e = jQuery.fn.jquery.split(" ")[0].split("."); if (e[0] < 2 && e[1] < 9 || e[0] == 1 && e[1] == 9 && e[2] < 1 || e[0] > 3) throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4");
}()), (function (n) {
  n.fn.emulateTransitionEnd = function (t) { let e = !1; const i = this; n(this).one("bsTransitionEnd", () => { e = !0; }); return setTimeout(() => { e || n(i).trigger(n.support.transition.end); }, t), this; }, n(() => {
    n.support.transition = (function o() {
      const t = document.createElement("bootstrap"); const e = {
        WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend",
      }; for (const i in e) if (t.style[i] !== undefined) return { end: e[i] }; return !1;
    }()), n.support.transition && (n.event.special.bsTransitionEnd = { bindType: n.support.transition.end, delegateType: n.support.transition.end, handle(t) { if (n(t.target).is(this)) return t.handleObj.handler.apply(this, arguments); } });
  });
}(jQuery)), (function (s) {
  const e = "[data-dismiss=\"alert\"]"; const a = function (t) { s(t).on("click", e, this.close); }; a.VERSION = "3.4.1", a.TRANSITION_DURATION = 150, a.prototype.close = function (t) { const e = s(this); let i = e.attr("data-target"); i || (i = (i = e.attr("href")) && i.replace(/.*(?=#[^\s]*$)/, "")), i = i === "#" ? [] : i; let o = s(document).find(i); function n() { o.detach().trigger("closed.bs.alert").remove(); }t && t.preventDefault(), o.length || (o = e.closest(".alert")), o.trigger(t = s.Event("close.bs.alert")), t.isDefaultPrevented() || (o.removeClass("in"), s.support.transition && o.hasClass("fade") ? o.one("bsTransitionEnd", n).emulateTransitionEnd(a.TRANSITION_DURATION) : n()); }; const t = s.fn.alert; s.fn.alert = function o(i) { return this.each(function () { const t = s(this); let e = t.data("bs.alert"); e || t.data("bs.alert", e = new a(this)), typeof i === "string" && e[i].call(t); }); }, s.fn.alert.Constructor = a, s.fn.alert.noConflict = function () { return s.fn.alert = t, this; }, s(document).on("click.bs.alert.data-api", e, a.prototype.close);
}(jQuery)), (function (s) {
  var n = function (t, e) { this.$element = s(t), this.options = s.extend({}, n.DEFAULTS, e), this.isLoading = !1; }; function i(o) { return this.each(function () { const t = s(this); let e = t.data("bs.button"); const i = typeof o === "object" && o; e || t.data("bs.button", e = new n(this, i)), o == "toggle" ? e.toggle() : o && e.setState(o); }); }n.VERSION = "3.4.1", n.DEFAULTS = { loadingText: "loading..." }, n.prototype.setState = function (t) { const e = "disabled"; const i = this.$element; const o = i.is("input") ? "val" : "html"; const n = i.data(); t += "Text", n.resetText == null && i.data("resetText", i[o]()), setTimeout(s.proxy(function () { i[o](n[t] == null ? this.options[t] : n[t]), t == "loadingText" ? (this.isLoading = !0, i.addClass(e).attr(e, e).prop(e, !0)) : this.isLoading && (this.isLoading = !1, i.removeClass(e).removeAttr(e).prop(e, !1)); }, this), 0); }, n.prototype.toggle = function () { let t = !0; const e = this.$element.closest("[data-toggle=\"buttons\"]"); if (e.length) { const i = this.$element.find("input"); i.prop("type") == "radio" ? (i.prop("checked") && (t = !1), e.find(".active").removeClass("active"), this.$element.addClass("active")) : i.prop("type") == "checkbox" && (i.prop("checked") !== this.$element.hasClass("active") && (t = !1), this.$element.toggleClass("active")), i.prop("checked", this.$element.hasClass("active")), t && i.trigger("change"); } else this.$element.attr("aria-pressed", !this.$element.hasClass("active")), this.$element.toggleClass("active"); }; const t = s.fn.button; s.fn.button = i, s.fn.button.Constructor = n, s.fn.button.noConflict = function () { return s.fn.button = t, this; }, s(document).on("click.bs.button.data-api", "[data-toggle^=\"button\"]", (t) => { const e = s(t.target).closest(".btn"); i.call(e, "toggle"), s(t.target).is("input[type=\"radio\"], input[type=\"checkbox\"]") || (t.preventDefault(), e.is("input,button") ? e.trigger("focus") : e.find("input:visible,button:visible").first().trigger("focus")); }).on("focus.bs.button.data-api blur.bs.button.data-api", "[data-toggle^=\"button\"]", (t) => { s(t.target).closest(".btn").toggleClass("focus", /^focus(in)?$/.test(t.type)); });
}(jQuery)), (function (p) {
  const c = function (t, e) { this.$element = p(t), this.$indicators = this.$element.find(".carousel-indicators"), this.options = e, this.paused = null, this.sliding = null, this.interval = null, this.$active = null, this.$items = null, this.options.keyboard && this.$element.on("keydown.bs.carousel", p.proxy(this.keydown, this)), this.options.pause == "hover" && !("ontouchstart" in document.documentElement) && this.$element.on("mouseenter.bs.carousel", p.proxy(this.pause, this)).on("mouseleave.bs.carousel", p.proxy(this.cycle, this)); }; function r(n) { return this.each(function () { const t = p(this); let e = t.data("bs.carousel"); const i = p.extend({}, c.DEFAULTS, t.data(), typeof n === "object" && n); const o = typeof n === "string" ? n : i.slide; e || t.data("bs.carousel", e = new c(this, i)), typeof n === "number" ? e.to(n) : o ? e[o]() : i.interval && e.pause().cycle(); }); }c.VERSION = "3.4.1", c.TRANSITION_DURATION = 600, c.DEFAULTS = {
    interval: 5e3, pause: "hover", wrap: !0, keyboard: !0,
  }, c.prototype.keydown = function (t) { if (!/input|textarea/i.test(t.target.tagName)) { switch (t.which) { case 37: this.prev(); break; case 39: this.next(); break; default: return; }t.preventDefault(); } }, c.prototype.cycle = function (t) { return t || (this.paused = !1), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval(p.proxy(this.next, this), this.options.interval)), this; }, c.prototype.getItemIndex = function (t) { return this.$items = t.parent().children(".item"), this.$items.index(t || this.$active); }, c.prototype.getItemForDirection = function (t, e) { const i = this.getItemIndex(e); if ((t == "prev" && i === 0 || t == "next" && i == this.$items.length - 1) && !this.options.wrap) return e; const o = (i + (t == "prev" ? -1 : 1)) % this.$items.length; return this.$items.eq(o); }, c.prototype.to = function (t) { const e = this; const i = this.getItemIndex(this.$active = this.$element.find(".item.active")); if (!(t > this.$items.length - 1 || t < 0)) return this.sliding ? this.$element.one("slid.bs.carousel", () => { e.to(t); }) : i == t ? this.pause().cycle() : this.slide(i < t ? "next" : "prev", this.$items.eq(t)); }, c.prototype.pause = function (t) { return t || (this.paused = !0), this.$element.find(".next, .prev").length && p.support.transition && (this.$element.trigger(p.support.transition.end), this.cycle(!0)), this.interval = clearInterval(this.interval), this; }, c.prototype.next = function () { if (!this.sliding) return this.slide("next"); }, c.prototype.prev = function () { if (!this.sliding) return this.slide("prev"); }, c.prototype.slide = function (t, e) { const i = this.$element.find(".item.active"); const o = e || this.getItemForDirection(t, i); const n = this.interval; const s = t == "next" ? "left" : "right"; const a = this; if (o.hasClass("active")) return this.sliding = !1; const r = o[0]; const l = p.Event("slide.bs.carousel", { relatedTarget: r, direction: s }); if (this.$element.trigger(l), !l.isDefaultPrevented()) { if (this.sliding = !0, n && this.pause(), this.$indicators.length) { this.$indicators.find(".active").removeClass("active"); const h = p(this.$indicators.children()[this.getItemIndex(o)]); h && h.addClass("active"); } const d = p.Event("slid.bs.carousel", { relatedTarget: r, direction: s }); return p.support.transition && this.$element.hasClass("slide") ? (o.addClass(t), typeof o === "object" && o.length && o[0].offsetWidth, i.addClass(s), o.addClass(s), i.one("bsTransitionEnd", () => { o.removeClass([t, s].join(" ")).addClass("active"), i.removeClass(["active", s].join(" ")), a.sliding = !1, setTimeout(() => { a.$element.trigger(d); }, 0); }).emulateTransitionEnd(c.TRANSITION_DURATION)) : (i.removeClass("active"), o.addClass("active"), this.sliding = !1, this.$element.trigger(d)), n && this.cycle(), this; } }; const t = p.fn.carousel; p.fn.carousel = r, p.fn.carousel.Constructor = c, p.fn.carousel.noConflict = function () { return p.fn.carousel = t, this; }; const e = function (t) { const e = p(this); let i = e.attr("href"); i && (i = i.replace(/.*(?=#[^\s]+$)/, "")); const o = e.attr("data-target") || i; const n = p(document).find(o); if (n.hasClass("carousel")) { const s = p.extend({}, n.data(), e.data()); const a = e.attr("data-slide-to"); a && (s.interval = !1), r.call(n, s), a && n.data("bs.carousel").to(a), t.preventDefault(); } }; p(document).on("click.bs.carousel.data-api", "[data-slide]", e).on("click.bs.carousel.data-api", "[data-slide-to]", e), p(window).on("load", () => { p("[data-ride=\"carousel\"]").each(function () { const t = p(this); r.call(t, t.data()); }); });
}(jQuery)), (function (a) {
  var r = function (t, e) { this.$element = a(t), this.options = a.extend({}, r.DEFAULTS, e), this.$trigger = a(`[data-toggle="collapse"][href="#${t.id}"],[data-toggle="collapse"][data-target="#${t.id}"]`), this.transitioning = null, this.options.parent ? this.$parent = this.getParent() : this.addAriaAndCollapsedClass(this.$element, this.$trigger), this.options.toggle && this.toggle(); }; function n(t) { let e; const i = t.attr("data-target") || (e = t.attr("href")) && e.replace(/.*(?=#[^\s]+$)/, ""); return a(document).find(i); } function l(o) { return this.each(function () { const t = a(this); let e = t.data("bs.collapse"); const i = a.extend({}, r.DEFAULTS, t.data(), typeof o === "object" && o); !e && i.toggle && /show|hide/.test(o) && (i.toggle = !1), e || t.data("bs.collapse", e = new r(this, i)), typeof o === "string" && e[o](); }); }r.VERSION = "3.4.1", r.TRANSITION_DURATION = 350, r.DEFAULTS = { toggle: !0 }, r.prototype.dimension = function () { return this.$element.hasClass("width") ? "width" : "height"; }, r.prototype.show = function () { if (!this.transitioning && !this.$element.hasClass("in")) { let t; const e = this.$parent && this.$parent.children(".panel").children(".in, .collapsing"); if (!(e && e.length && (t = e.data("bs.collapse")) && t.transitioning)) { const i = a.Event("show.bs.collapse"); if (this.$element.trigger(i), !i.isDefaultPrevented()) { e && e.length && (l.call(e, "hide"), t || e.data("bs.collapse", null)); const o = this.dimension(); this.$element.removeClass("collapse").addClass("collapsing")[o](0).attr("aria-expanded", !0), this.$trigger.removeClass("collapsed").attr("aria-expanded", !0), this.transitioning = 1; const n = function () { this.$element.removeClass("collapsing").addClass("collapse in")[o](""), this.transitioning = 0, this.$element.trigger("shown.bs.collapse"); }; if (!a.support.transition) return n.call(this); const s = a.camelCase(["scroll", o].join("-")); this.$element.one("bsTransitionEnd", a.proxy(n, this)).emulateTransitionEnd(r.TRANSITION_DURATION)[o](this.$element[0][s]); } } } }, r.prototype.hide = function () { if (!this.transitioning && this.$element.hasClass("in")) { const t = a.Event("hide.bs.collapse"); if (this.$element.trigger(t), !t.isDefaultPrevented()) { const e = this.dimension(); this.$element[e](this.$element[e]())[0].offsetHeight, this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", !1), this.$trigger.addClass("collapsed").attr("aria-expanded", !1), this.transitioning = 1; const i = function () { this.transitioning = 0, this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse"); }; if (!a.support.transition) return i.call(this); this.$element[e](0).one("bsTransitionEnd", a.proxy(i, this)).emulateTransitionEnd(r.TRANSITION_DURATION); } } }, r.prototype.toggle = function () { this[this.$element.hasClass("in") ? "hide" : "show"](); }, r.prototype.getParent = function () {
    return a(document).find(this.options.parent).find(`[data-toggle="collapse"][data-parent="${this.options.parent}"]`).each(a.proxy(function (t, e) { const i = a(e); this.addAriaAndCollapsedClass(n(i), i); }, this))
      .end();
  }, r.prototype.addAriaAndCollapsedClass = function (t, e) { const i = t.hasClass("in"); t.attr("aria-expanded", i), e.toggleClass("collapsed", !i).attr("aria-expanded", i); }; const t = a.fn.collapse; a.fn.collapse = l, a.fn.collapse.Constructor = r, a.fn.collapse.noConflict = function () { return a.fn.collapse = t, this; }, a(document).on("click.bs.collapse.data-api", "[data-toggle=\"collapse\"]", function (t) { const e = a(this); e.attr("data-target") || t.preventDefault(); const i = n(e); const o = i.data("bs.collapse") ? "toggle" : e.data(); l.call(i, o); });
}(jQuery)), (function (a) {
  const r = "[data-toggle=\"dropdown\"]"; const o = function (t) { a(t).on("click.bs.dropdown", this.toggle); }; function l(t) { let e = t.attr("data-target"); e || (e = (e = t.attr("href")) && /#[A-Za-z]/.test(e) && e.replace(/.*(?=#[^\s]*$)/, "")); const i = e !== "#" ? a(document).find(e) : null; return i && i.length ? i : t.parent(); } function s(o) { o && o.which === 3 || (a(".dropdown-backdrop").remove(), a(r).each(function () { const t = a(this); const e = l(t); const i = { relatedTarget: this }; e.hasClass("open") && (o && o.type == "click" && /input|textarea/i.test(o.target.tagName) && a.contains(e[0], o.target) || (e.trigger(o = a.Event("hide.bs.dropdown", i)), o.isDefaultPrevented() || (t.attr("aria-expanded", "false"), e.removeClass("open").trigger(a.Event("hidden.bs.dropdown", i))))); })); }o.VERSION = "3.4.1", o.prototype.toggle = function (t) { const e = a(this); if (!e.is(".disabled, :disabled")) { const i = l(e); const o = i.hasClass("open"); if (s(), !o) { "ontouchstart" in document.documentElement && !i.closest(".navbar-nav").length && a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click", s); const n = { relatedTarget: this }; if (i.trigger(t = a.Event("show.bs.dropdown", n)), t.isDefaultPrevented()) return; e.trigger("focus").attr("aria-expanded", "true"), i.toggleClass("open").trigger(a.Event("shown.bs.dropdown", n)); } return !1; } }, o.prototype.keydown = function (t) { if (/(38|40|27|32)/.test(t.which) && !/input|textarea/i.test(t.target.tagName)) { const e = a(this); if (t.preventDefault(), t.stopPropagation(), !e.is(".disabled, :disabled")) { const i = l(e); const o = i.hasClass("open"); if (!o && t.which != 27 || o && t.which == 27) return t.which == 27 && i.find(r).trigger("focus"), e.trigger("click"); const n = i.find(".dropdown-menu li:not(.disabled):visible a"); if (n.length) { let s = n.index(t.target); t.which == 38 && s > 0 && s--, t.which == 40 && s < n.length - 1 && s++, ~s || (s = 0), n.eq(s).trigger("focus"); } } } }; const t = a.fn.dropdown; a.fn.dropdown = function e(i) { return this.each(function () { const t = a(this); let e = t.data("bs.dropdown"); e || t.data("bs.dropdown", e = new o(this)), typeof i === "string" && e[i].call(t); }); }, a.fn.dropdown.Constructor = o, a.fn.dropdown.noConflict = function () { return a.fn.dropdown = t, this; }, a(document).on("click.bs.dropdown.data-api", s).on("click.bs.dropdown.data-api", ".dropdown form", (t) => { t.stopPropagation(); }).on("click.bs.dropdown.data-api", r, o.prototype.toggle)
    .on("keydown.bs.dropdown.data-api", r, o.prototype.keydown)
    .on("keydown.bs.dropdown.data-api", ".dropdown-menu", o.prototype.keydown);
}(jQuery)), (function (a) {
  const s = function (t, e) { this.options = e, this.$body = a(document.body), this.$element = a(t), this.$dialog = this.$element.find(".modal-dialog"), this.$backdrop = null, this.isShown = null, this.originalBodyPad = null, this.scrollbarWidth = 0, this.ignoreBackdropClick = !1, this.fixedContent = ".navbar-fixed-top, .navbar-fixed-bottom", this.options.remote && this.$element.find(".modal-content").load(this.options.remote, a.proxy(function () { this.$element.trigger("loaded.bs.modal"); }, this)); }; function r(o, n) { return this.each(function () { const t = a(this); let e = t.data("bs.modal"); const i = a.extend({}, s.DEFAULTS, t.data(), typeof o === "object" && o); e || t.data("bs.modal", e = new s(this, i)), typeof o === "string" ? e[o](n) : i.show && e.show(n); }); }s.VERSION = "3.4.1", s.TRANSITION_DURATION = 300, s.BACKDROP_TRANSITION_DURATION = 150, s.DEFAULTS = { backdrop: !0, keyboard: !0, show: !0 }, s.prototype.toggle = function (t) { return this.isShown ? this.hide() : this.show(t); }, s.prototype.show = function (i) { const o = this; const t = a.Event("show.bs.modal", { relatedTarget: i }); this.$element.trigger(t), this.isShown || t.isDefaultPrevented() || (this.isShown = !0, this.checkScrollbar(), this.setScrollbar(), this.$body.addClass("modal-open"), this.escape(), this.resize(), this.$element.on("click.dismiss.bs.modal", "[data-dismiss=\"modal\"]", a.proxy(this.hide, this)), this.$dialog.on("mousedown.dismiss.bs.modal", () => { o.$element.one("mouseup.dismiss.bs.modal", (t) => { a(t.target).is(o.$element) && (o.ignoreBackdropClick = !0); }); }), this.backdrop(() => { const t = a.support.transition && o.$element.hasClass("fade"); o.$element.parent().length || o.$element.appendTo(o.$body), o.$element.show().scrollTop(0), o.adjustDialog(), t && o.$element[0].offsetWidth, o.$element.addClass("in"), o.enforceFocus(); const e = a.Event("shown.bs.modal", { relatedTarget: i }); t ? o.$dialog.one("bsTransitionEnd", () => { o.$element.trigger("focus").trigger(e); }).emulateTransitionEnd(s.TRANSITION_DURATION) : o.$element.trigger("focus").trigger(e); })); }, s.prototype.hide = function (t) { t && t.preventDefault(), t = a.Event("hide.bs.modal"), this.$element.trigger(t), this.isShown && !t.isDefaultPrevented() && (this.isShown = !1, this.escape(), this.resize(), a(document).off("focusin.bs.modal"), this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"), this.$dialog.off("mousedown.dismiss.bs.modal"), a.support.transition && this.$element.hasClass("fade") ? this.$element.one("bsTransitionEnd", a.proxy(this.hideModal, this)).emulateTransitionEnd(s.TRANSITION_DURATION) : this.hideModal()); }, s.prototype.enforceFocus = function () { a(document).off("focusin.bs.modal").on("focusin.bs.modal", a.proxy(function (t) { document === t.target || this.$element[0] === t.target || this.$element.has(t.target).length || this.$element.trigger("focus"); }, this)); }, s.prototype.escape = function () { this.isShown && this.options.keyboard ? this.$element.on("keydown.dismiss.bs.modal", a.proxy(function (t) { t.which == 27 && this.hide(); }, this)) : this.isShown || this.$element.off("keydown.dismiss.bs.modal"); }, s.prototype.resize = function () { this.isShown ? a(window).on("resize.bs.modal", a.proxy(this.handleUpdate, this)) : a(window).off("resize.bs.modal"); }, s.prototype.hideModal = function () { const t = this; this.$element.hide(), this.backdrop(() => { t.$body.removeClass("modal-open"), t.resetAdjustments(), t.resetScrollbar(), t.$element.trigger("hidden.bs.modal"); }); }, s.prototype.removeBackdrop = function () { this.$backdrop && this.$backdrop.remove(), this.$backdrop = null; }, s.prototype.backdrop = function (t) { const e = this; const i = this.$element.hasClass("fade") ? "fade" : ""; if (this.isShown && this.options.backdrop) { const o = a.support.transition && i; if (this.$backdrop = a(document.createElement("div")).addClass(`modal-backdrop ${i}`).appendTo(this.$body), this.$element.on("click.dismiss.bs.modal", a.proxy(function (t) { this.ignoreBackdropClick ? this.ignoreBackdropClick = !1 : t.target === t.currentTarget && (this.options.backdrop == "static" ? this.$element[0].focus() : this.hide()); }, this)), o && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !t) return; o ? this.$backdrop.one("bsTransitionEnd", t).emulateTransitionEnd(s.BACKDROP_TRANSITION_DURATION) : t(); } else if (!this.isShown && this.$backdrop) { this.$backdrop.removeClass("in"); const n = function () { e.removeBackdrop(), t && t(); }; a.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one("bsTransitionEnd", n).emulateTransitionEnd(s.BACKDROP_TRANSITION_DURATION) : n(); } else t && t(); }, s.prototype.handleUpdate = function () { this.adjustDialog(); }, s.prototype.adjustDialog = function () { const t = this.$element[0].scrollHeight > document.documentElement.clientHeight; this.$element.css({ paddingLeft: !this.bodyIsOverflowing && t ? this.scrollbarWidth : "", paddingRight: this.bodyIsOverflowing && !t ? this.scrollbarWidth : "" }); }, s.prototype.resetAdjustments = function () { this.$element.css({ paddingLeft: "", paddingRight: "" }); }, s.prototype.checkScrollbar = function () { let t = window.innerWidth; if (!t) { const e = document.documentElement.getBoundingClientRect(); t = e.right - Math.abs(e.left); } this.bodyIsOverflowing = document.body.clientWidth < t, this.scrollbarWidth = this.measureScrollbar(); }, s.prototype.setScrollbar = function () { const t = parseInt(this.$body.css("padding-right") || 0, 10); this.originalBodyPad = document.body.style.paddingRight || ""; const n = this.scrollbarWidth; this.bodyIsOverflowing && (this.$body.css("padding-right", t + n), a(this.fixedContent).each((t, e) => { const i = e.style.paddingRight; const o = a(e).css("padding-right"); a(e).data("padding-right", i).css("padding-right", `${parseFloat(o) + n}px`); })); }, s.prototype.resetScrollbar = function () { this.$body.css("padding-right", this.originalBodyPad), a(this.fixedContent).each((t, e) => { const i = a(e).data("padding-right"); a(e).removeData("padding-right"), e.style.paddingRight = i || ""; }); }, s.prototype.measureScrollbar = function () { const t = document.createElement("div"); t.className = "modal-scrollbar-measure", this.$body.append(t); const e = t.offsetWidth - t.clientWidth; return this.$body[0].removeChild(t), e; }; const t = a.fn.modal; a.fn.modal = r, a.fn.modal.Constructor = s, a.fn.modal.noConflict = function () { return a.fn.modal = t, this; }, a(document).on("click.bs.modal.data-api", "[data-toggle=\"modal\"]", function (t) { const e = a(this); const i = e.attr("href"); const o = e.attr("data-target") || i && i.replace(/.*(?=#[^\s]+$)/, ""); const n = a(document).find(o); const s = n.data("bs.modal") ? "toggle" : a.extend({ remote: !/#/.test(i) && i }, n.data(), e.data()); e.is("a") && t.preventDefault(), n.one("show.bs.modal", (t) => { t.isDefaultPrevented() || n.one("hidden.bs.modal", () => { e.is(":visible") && e.trigger("focus"); }); }), r.call(n, s, this); });
}(jQuery)), (function (g) {
  const o = ["sanitize", "whiteList", "sanitizeFn"]; const a = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]; const t = {
    "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i], a: ["target", "href", "title", "rel"], area: [], b: [], br: [], col: [], code: [], div: [], em: [], hr: [], h1: [], h2: [], h3: [], h4: [], h5: [], h6: [], i: [], img: ["src", "alt", "title", "width", "height"], li: [], ol: [], p: [], pre: [], s: [], small: [], span: [], sub: [], sup: [], strong: [], u: [], ul: [],
  }; const r = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi; const l = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i; function u(t, e) { const i = t.nodeName.toLowerCase(); if (g.inArray(i, e) !== -1) return g.inArray(i, a) === -1 || Boolean(t.nodeValue.match(r) || t.nodeValue.match(l)); for (let o = g(e).filter((t, e) => e instanceof RegExp), n = 0, s = o.length; n < s; n++) if (i.match(o[n])) return !0; return !1; } function n(t, e, i) { if (t.length === 0) return t; if (i && typeof i === "function") return i(t); if (!document.implementation || !document.implementation.createHTMLDocument) return t; const o = document.implementation.createHTMLDocument("sanitization"); o.body.innerHTML = t; for (let n = g.map(e, (t, e) => e), s = g(o.body).find("*"), a = 0, r = s.length; a < r; a++) { const l = s[a]; const h = l.nodeName.toLowerCase(); if (g.inArray(h, n) !== -1) for (let d = g.map(l.attributes, (t) => t), p = [].concat(e["*"] || [], e[h] || []), c = 0, f = d.length; c < f; c++)u(d[c], p) || l.removeAttribute(d[c].nodeName); else l.parentNode.removeChild(l); } return o.body.innerHTML; } const m = function (t, e) { this.type = null, this.options = null, this.enabled = null, this.timeout = null, this.hoverState = null, this.$element = null, this.inState = null, this.init("tooltip", t, e); }; m.VERSION = "3.4.1", m.TRANSITION_DURATION = 150, m.DEFAULTS = {
    animation: !0, placement: "top", selector: !1, template: "<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>", trigger: "hover focus", title: "", delay: 0, html: !1, container: !1, viewport: { selector: "body", padding: 0 }, sanitize: !0, sanitizeFn: null, whiteList: t,
  }, m.prototype.init = function (t, e, i) { if (this.enabled = !0, this.type = t, this.$element = g(e), this.options = this.getOptions(i), this.$viewport = this.options.viewport && g(document).find(g.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport), this.inState = { click: !1, hover: !1, focus: !1 }, this.$element[0] instanceof document.constructor && !this.options.selector) throw new Error(`\`selector\` option must be specified when initializing ${this.type} on the window.document object!`); for (let o = this.options.trigger.split(" "), n = o.length; n--;) { const s = o[n]; if (s == "click") this.$element.on(`click.${this.type}`, this.options.selector, g.proxy(this.toggle, this)); else if (s != "manual") { const a = s == "hover" ? "mouseenter" : "focusin"; const r = s == "hover" ? "mouseleave" : "focusout"; this.$element.on(`${a}.${this.type}`, this.options.selector, g.proxy(this.enter, this)), this.$element.on(`${r}.${this.type}`, this.options.selector, g.proxy(this.leave, this)); } } this.options.selector ? this._options = g.extend({}, this.options, { trigger: "manual", selector: "" }) : this.fixTitle(); }, m.prototype.getDefaults = function () { return m.DEFAULTS; }, m.prototype.getOptions = function (t) { const e = this.$element.data(); for (const i in e)e.hasOwnProperty(i) && g.inArray(i, o) !== -1 && delete e[i]; return (t = g.extend({}, this.getDefaults(), e, t)).delay && typeof t.delay === "number" && (t.delay = { show: t.delay, hide: t.delay }), t.sanitize && (t.template = n(t.template, t.whiteList, t.sanitizeFn)), t; }, m.prototype.getDelegateOptions = function () { const i = {}; const o = this.getDefaults(); return this._options && g.each(this._options, (t, e) => { o[t] != e && (i[t] = e); }), i; }, m.prototype.enter = function (t) { let e = t instanceof this.constructor ? t : g(t.currentTarget).data(`bs.${this.type}`); if (e || (e = new this.constructor(t.currentTarget, this.getDelegateOptions()), g(t.currentTarget).data(`bs.${this.type}`, e)), t instanceof g.Event && (e.inState[t.type == "focusin" ? "focus" : "hover"] = !0), e.tip().hasClass("in") || e.hoverState == "in")e.hoverState = "in"; else { if (clearTimeout(e.timeout), e.hoverState = "in", !e.options.delay || !e.options.delay.show) return e.show(); e.timeout = setTimeout(() => { e.hoverState == "in" && e.show(); }, e.options.delay.show); } }, m.prototype.isInStateTrue = function () { for (const t in this.inState) if (this.inState[t]) return !0; return !1; }, m.prototype.leave = function (t) { let e = t instanceof this.constructor ? t : g(t.currentTarget).data(`bs.${this.type}`); if (e || (e = new this.constructor(t.currentTarget, this.getDelegateOptions()), g(t.currentTarget).data(`bs.${this.type}`, e)), t instanceof g.Event && (e.inState[t.type == "focusout" ? "focus" : "hover"] = !1), !e.isInStateTrue()) { if (clearTimeout(e.timeout), e.hoverState = "out", !e.options.delay || !e.options.delay.hide) return e.hide(); e.timeout = setTimeout(() => { e.hoverState == "out" && e.hide(); }, e.options.delay.hide); } }, m.prototype.show = function () { const t = g.Event(`show.bs.${this.type}`); if (this.hasContent() && this.enabled) { this.$element.trigger(t); const e = g.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]); if (t.isDefaultPrevented() || !e) return; const i = this; const o = this.tip(); const n = this.getUID(this.type); this.setContent(), o.attr("id", n), this.$element.attr("aria-describedby", n), this.options.animation && o.addClass("fade"); let s = typeof this.options.placement === "function" ? this.options.placement.call(this, o[0], this.$element[0]) : this.options.placement; const a = /\s?auto?\s?/i; const r = a.test(s); r && (s = s.replace(a, "") || "top"), o.detach().css({ top: 0, left: 0, display: "block" }).addClass(s).data(`bs.${this.type}`, this), this.options.container ? o.appendTo(g(document).find(this.options.container)) : o.insertAfter(this.$element), this.$element.trigger(`inserted.bs.${this.type}`); const l = this.getPosition(); const h = o[0].offsetWidth; const d = o[0].offsetHeight; if (r) { const p = s; const c = this.getPosition(this.$viewport); s = s == "bottom" && l.bottom + d > c.bottom ? "top" : s == "top" && l.top - d < c.top ? "bottom" : s == "right" && l.right + h > c.width ? "left" : s == "left" && l.left - h < c.left ? "right" : s, o.removeClass(p).addClass(s); } const f = this.getCalculatedOffset(s, l, h, d); this.applyPlacement(f, s); const u = function () { const t = i.hoverState; i.$element.trigger(`shown.bs.${i.type}`), i.hoverState = null, t == "out" && i.leave(i); }; g.support.transition && this.$tip.hasClass("fade") ? o.one("bsTransitionEnd", u).emulateTransitionEnd(m.TRANSITION_DURATION) : u(); } }, m.prototype.applyPlacement = function (t, e) { const i = this.tip(); const o = i[0].offsetWidth; const n = i[0].offsetHeight; let s = parseInt(i.css("margin-top"), 10); let a = parseInt(i.css("margin-left"), 10); isNaN(s) && (s = 0), isNaN(a) && (a = 0), t.top += s, t.left += a, g.offset.setOffset(i[0], g.extend({ using(t) { i.css({ top: Math.round(t.top), left: Math.round(t.left) }); } }, t), 0), i.addClass("in"); const r = i[0].offsetWidth; const l = i[0].offsetHeight; e == "top" && l != n && (t.top = t.top + n - l); const h = this.getViewportAdjustedDelta(e, t, r, l); h.left ? t.left += h.left : t.top += h.top; const d = /top|bottom/.test(e); const p = d ? 2 * h.left - o + r : 2 * h.top - n + l; const c = d ? "offsetWidth" : "offsetHeight"; i.offset(t), this.replaceArrow(p, i[0][c], d); }, m.prototype.replaceArrow = function (t, e, i) { this.arrow().css(i ? "left" : "top", `${50 * (1 - t / e)}%`).css(i ? "top" : "left", ""); }, m.prototype.setContent = function () { const t = this.tip(); let e = this.getTitle(); this.options.html ? (this.options.sanitize && (e = n(e, this.options.whiteList, this.options.sanitizeFn)), t.find(".tooltip-inner").html(e)) : t.find(".tooltip-inner").text(e), t.removeClass("fade in top bottom left right"); }, m.prototype.hide = function (t) { const e = this; const i = g(this.$tip); const o = g.Event(`hide.bs.${this.type}`); function n() { e.hoverState != "in" && i.detach(), e.$element && e.$element.removeAttr("aria-describedby").trigger(`hidden.bs.${e.type}`), t && t(); } if (this.$element.trigger(o), !o.isDefaultPrevented()) return i.removeClass("in"), g.support.transition && i.hasClass("fade") ? i.one("bsTransitionEnd", n).emulateTransitionEnd(m.TRANSITION_DURATION) : n(), this.hoverState = null, this; }, m.prototype.fixTitle = function () { const t = this.$element; (t.attr("title") || typeof t.attr("data-original-title") !== "string") && t.attr("data-original-title", t.attr("title") || "").attr("title", ""); }, m.prototype.hasContent = function () { return this.getTitle(); }, m.prototype.getPosition = function (t) { const e = (t = t || this.$element)[0]; const i = e.tagName == "BODY"; let o = e.getBoundingClientRect(); o.width == null && (o = g.extend({}, o, { width: o.right - o.left, height: o.bottom - o.top })); const n = window.SVGElement && e instanceof window.SVGElement; const s = i ? { top: 0, left: 0 } : n ? null : t.offset(); const a = { scroll: i ? document.documentElement.scrollTop || document.body.scrollTop : t.scrollTop() }; const r = i ? { width: g(window).width(), height: g(window).height() } : null; return g.extend({}, o, a, r, s); }, m.prototype.getCalculatedOffset = function (t, e, i, o) { return t == "bottom" ? { top: e.top + e.height, left: e.left + e.width / 2 - i / 2 } : t == "top" ? { top: e.top - o, left: e.left + e.width / 2 - i / 2 } : t == "left" ? { top: e.top + e.height / 2 - o / 2, left: e.left - i } : { top: e.top + e.height / 2 - o / 2, left: e.left + e.width }; }, m.prototype.getViewportAdjustedDelta = function (t, e, i, o) { const n = { top: 0, left: 0 }; if (!this.$viewport) return n; const s = this.options.viewport && this.options.viewport.padding || 0; const a = this.getPosition(this.$viewport); if (/right|left/.test(t)) { const r = e.top - s - a.scroll; const l = e.top + s - a.scroll + o; r < a.top ? n.top = a.top - r : l > a.top + a.height && (n.top = a.top + a.height - l); } else { const h = e.left - s; const d = e.left + s + i; h < a.left ? n.left = a.left - h : d > a.right && (n.left = a.left + a.width - d); } return n; }, m.prototype.getTitle = function () { const t = this.$element; const e = this.options; return t.attr("data-original-title") || (typeof e.title === "function" ? e.title.call(t[0]) : e.title); }, m.prototype.getUID = function (t) { for (;t += ~~(1e6 * Math.random()), document.getElementById(t););return t; }, m.prototype.tip = function () { if (!this.$tip && (this.$tip = g(this.options.template), this.$tip.length != 1)) throw new Error(`${this.type} \`template\` option must consist of exactly 1 top-level element!`); return this.$tip; }, m.prototype.arrow = function () { return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow"); }, m.prototype.enable = function () { this.enabled = !0; }, m.prototype.disable = function () { this.enabled = !1; }, m.prototype.toggleEnabled = function () { this.enabled = !this.enabled; }, m.prototype.toggle = function (t) { let e = this; t && ((e = g(t.currentTarget).data(`bs.${this.type}`)) || (e = new this.constructor(t.currentTarget, this.getDelegateOptions()), g(t.currentTarget).data(`bs.${this.type}`, e))), t ? (e.inState.click = !e.inState.click, e.isInStateTrue() ? e.enter(e) : e.leave(e)) : e.tip().hasClass("in") ? e.leave(e) : e.enter(e); }, m.prototype.destroy = function () { const t = this; clearTimeout(this.timeout), this.hide(() => { t.$element.off(`.${t.type}`).removeData(`bs.${t.type}`), t.$tip && t.$tip.detach(), t.$tip = null, t.$arrow = null, t.$viewport = null, t.$element = null; }); }, m.prototype.sanitizeHtml = function (t) { return n(t, this.options.whiteList, this.options.sanitizeFn); }; const e = g.fn.tooltip; g.fn.tooltip = function i(o) { return this.each(function () { const t = g(this); let e = t.data("bs.tooltip"); const i = typeof o === "object" && o; !e && /destroy|hide/.test(o) || (e || t.data("bs.tooltip", e = new m(this, i)), typeof o === "string" && e[o]()); }); }, g.fn.tooltip.Constructor = m, g.fn.tooltip.noConflict = function () { return g.fn.tooltip = e, this; };
}(jQuery)), (function (n) {
  const s = function (t, e) { this.init("popover", t, e); }; if (!n.fn.tooltip) throw new Error("Popover requires tooltip.js"); s.VERSION = "3.4.1", s.DEFAULTS = n.extend({}, n.fn.tooltip.Constructor.DEFAULTS, {
    placement: "right", trigger: "click", content: "", template: "<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>",
  }), ((s.prototype = n.extend({}, n.fn.tooltip.Constructor.prototype)).constructor = s).prototype.getDefaults = function () { return s.DEFAULTS; }, s.prototype.setContent = function () {
    const t = this.tip(); let e = this.getTitle(); let i = this.getContent(); if (this.options.html) {
      const o = typeof i; this.options.sanitize && (e = this.sanitizeHtml(e), o === "string" && (i = this.sanitizeHtml(i))), t.find(".popover-title").html(e), t.find(".popover-content").children().detach().end()
        [o === "string" ? "html" : "append"](i);
    } else {
      t.find(".popover-title").text(e), t.find(".popover-content").children().detach().end()
        .text(i);
    } t.removeClass("fade top bottom left right in"), t.find(".popover-title").html() || t.find(".popover-title").hide();
  }, s.prototype.hasContent = function () { return this.getTitle() || this.getContent(); }, s.prototype.getContent = function () { const t = this.$element; const e = this.options; return t.attr("data-content") || (typeof e.content === "function" ? e.content.call(t[0]) : e.content); }, s.prototype.arrow = function () { return this.$arrow = this.$arrow || this.tip().find(".arrow"); }; const t = n.fn.popover; n.fn.popover = function e(o) { return this.each(function () { const t = n(this); let e = t.data("bs.popover"); const i = typeof o === "object" && o; !e && /destroy|hide/.test(o) || (e || t.data("bs.popover", e = new s(this, i)), typeof o === "string" && e[o]()); }); }, n.fn.popover.Constructor = s, n.fn.popover.noConflict = function () { return n.fn.popover = t, this; };
}(jQuery)), (function (s) {
  function n(t, e) { this.$body = s(document.body), this.$scrollElement = s(t).is(document.body) ? s(window) : s(t), this.options = s.extend({}, n.DEFAULTS, e), this.selector = `${this.options.target || ""} .nav li > a`, this.offsets = [], this.targets = [], this.activeTarget = null, this.scrollHeight = 0, this.$scrollElement.on("scroll.bs.scrollspy", s.proxy(this.process, this)), this.refresh(), this.process(); } function e(o) { return this.each(function () { const t = s(this); let e = t.data("bs.scrollspy"); const i = typeof o === "object" && o; e || t.data("bs.scrollspy", e = new n(this, i)), typeof o === "string" && e[o](); }); }n.VERSION = "3.4.1", n.DEFAULTS = { offset: 10 }, n.prototype.getScrollHeight = function () { return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight); }, n.prototype.refresh = function () { const t = this; let o = "offset"; let n = 0; this.offsets = [], this.targets = [], this.scrollHeight = this.getScrollHeight(), s.isWindow(this.$scrollElement[0]) || (o = "position", n = this.$scrollElement.scrollTop()), this.$body.find(this.selector).map(function () { const t = s(this); const e = t.data("target") || t.attr("href"); const i = /^#./.test(e) && s(e); return i && i.length && i.is(":visible") && [[i[o]().top + n, e]] || null; }).sort((t, e) => t[0] - e[0]).each(function () { t.offsets.push(this[0]), t.targets.push(this[1]); }); }, n.prototype.process = function () { let t; const e = this.$scrollElement.scrollTop() + this.options.offset; const i = this.getScrollHeight(); const o = this.options.offset + i - this.$scrollElement.height(); const n = this.offsets; const s = this.targets; const a = this.activeTarget; if (this.scrollHeight != i && this.refresh(), o <= e) return a != (t = s[s.length - 1]) && this.activate(t); if (a && e < n[0]) return this.activeTarget = null, this.clear(); for (t = n.length; t--;)a != s[t] && e >= n[t] && (n[t + 1] === undefined || e < n[t + 1]) && this.activate(s[t]); }, n.prototype.activate = function (t) { this.activeTarget = t, this.clear(); const e = `${this.selector}[data-target="${t}"],${this.selector}[href="${t}"]`; let i = s(e).parents("li").addClass("active"); i.parent(".dropdown-menu").length && (i = i.closest("li.dropdown").addClass("active")), i.trigger("activate.bs.scrollspy"); }, n.prototype.clear = function () { s(this.selector).parentsUntil(this.options.target, ".active").removeClass("active"); }; const t = s.fn.scrollspy; s.fn.scrollspy = e, s.fn.scrollspy.Constructor = n, s.fn.scrollspy.noConflict = function () { return s.fn.scrollspy = t, this; }, s(window).on("load.bs.scrollspy.data-api", () => { s("[data-spy=\"scroll\"]").each(function () { const t = s(this); e.call(t, t.data()); }); });
}(jQuery)), (function (r) {
  const a = function (t) { this.element = r(t); }; function e(i) { return this.each(function () { const t = r(this); let e = t.data("bs.tab"); e || t.data("bs.tab", e = new a(this)), typeof i === "string" && e[i](); }); }a.VERSION = "3.4.1", a.TRANSITION_DURATION = 150, a.prototype.show = function () { const t = this.element; const e = t.closest("ul:not(.dropdown-menu)"); let i = t.data("target"); if (i || (i = (i = t.attr("href")) && i.replace(/.*(?=#[^\s]*$)/, "")), !t.parent("li").hasClass("active")) { const o = e.find(".active:last a"); const n = r.Event("hide.bs.tab", { relatedTarget: t[0] }); const s = r.Event("show.bs.tab", { relatedTarget: o[0] }); if (o.trigger(n), t.trigger(s), !s.isDefaultPrevented() && !n.isDefaultPrevented()) { const a = r(document).find(i); this.activate(t.closest("li"), e), this.activate(a, a.parent(), () => { o.trigger({ type: "hidden.bs.tab", relatedTarget: t[0] }), t.trigger({ type: "shown.bs.tab", relatedTarget: o[0] }); }); } } }, a.prototype.activate = function (t, e, i) {
    const o = e.find("> .active"); const n = i && r.support.transition && (o.length && o.hasClass("fade") || !!e.find("> .fade").length); function s() {
      o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end()
        .find("[data-toggle=\"tab\"]")
        .attr("aria-expanded", !1), t.addClass("active").find("[data-toggle=\"tab\"]").attr("aria-expanded", !0), n ? (t[0].offsetWidth, t.addClass("in")) : t.removeClass("fade"), t.parent(".dropdown-menu").length && t.closest("li.dropdown").addClass("active").end().find("[data-toggle=\"tab\"]")
        .attr("aria-expanded", !0), i && i();
    }o.length && n ? o.one("bsTransitionEnd", s).emulateTransitionEnd(a.TRANSITION_DURATION) : s(), o.removeClass("in");
  }; const t = r.fn.tab; r.fn.tab = e, r.fn.tab.Constructor = a, r.fn.tab.noConflict = function () { return r.fn.tab = t, this; }; const i = function (t) { t.preventDefault(), e.call(r(this), "show"); }; r(document).on("click.bs.tab.data-api", "[data-toggle=\"tab\"]", i).on("click.bs.tab.data-api", "[data-toggle=\"pill\"]", i);
}(jQuery)), (function (l) {
  var h = function (t, e) { this.options = l.extend({}, h.DEFAULTS, e); const i = this.options.target === h.DEFAULTS.target ? l(this.options.target) : l(document).find(this.options.target); this.$target = i.on("scroll.bs.affix.data-api", l.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", l.proxy(this.checkPositionWithEventLoop, this)), this.$element = l(t), this.affixed = null, this.unpin = null, this.pinnedOffset = null, this.checkPosition(); }; function i(o) { return this.each(function () { const t = l(this); let e = t.data("bs.affix"); const i = typeof o === "object" && o; e || t.data("bs.affix", e = new h(this, i)), typeof o === "string" && e[o](); }); }h.VERSION = "3.4.1", h.RESET = "affix affix-top affix-bottom", h.DEFAULTS = { offset: 0, target: window }, h.prototype.getState = function (t, e, i, o) { const n = this.$target.scrollTop(); const s = this.$element.offset(); const a = this.$target.height(); if (i != null && this.affixed == "top") return n < i && "top"; if (this.affixed == "bottom") return i != null ? !(n + this.unpin <= s.top) && "bottom" : !(n + a <= t - o) && "bottom"; const r = this.affixed == null; const l = r ? n : s.top; return i != null && n <= i ? "top" : o != null && t - o <= l + (r ? a : e) && "bottom"; }, h.prototype.getPinnedOffset = function () { if (this.pinnedOffset) return this.pinnedOffset; this.$element.removeClass(h.RESET).addClass("affix"); const t = this.$target.scrollTop(); const e = this.$element.offset(); return this.pinnedOffset = e.top - t; }, h.prototype.checkPositionWithEventLoop = function () { setTimeout(l.proxy(this.checkPosition, this), 1); }, h.prototype.checkPosition = function () { if (this.$element.is(":visible")) { const t = this.$element.height(); const e = this.options.offset; let i = e.top; let o = e.bottom; const n = Math.max(l(document).height(), l(document.body).height()); typeof e !== "object" && (o = i = e), typeof i === "function" && (i = e.top(this.$element)), typeof o === "function" && (o = e.bottom(this.$element)); const s = this.getState(n, t, i, o); if (this.affixed != s) { this.unpin != null && this.$element.css("top", ""); const a = `affix${s ? `-${s}` : ""}`; const r = l.Event(`${a}.bs.affix`); if (this.$element.trigger(r), r.isDefaultPrevented()) return; this.affixed = s, this.unpin = s == "bottom" ? this.getPinnedOffset() : null, this.$element.removeClass(h.RESET).addClass(a).trigger(`${a.replace("affix", "affixed")}.bs.affix`); }s == "bottom" && this.$element.offset({ top: n - t - o }); } }; const t = l.fn.affix; l.fn.affix = i, l.fn.affix.Constructor = h, l.fn.affix.noConflict = function () { return l.fn.affix = t, this; }, l(window).on("load", () => { l("[data-spy=\"affix\"]").each(function () { const t = l(this); const e = t.data(); e.offset = e.offset || {}, e.offsetBottom != null && (e.offset.bottom = e.offsetBottom), e.offsetTop != null && (e.offset.top = e.offsetTop), i.call(t, e); }); });
}(jQuery));
